{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Ai chatbot-interview\\\\ai-interview-chatbot\\\\frontend\\\\src\\\\pages\\\\Login.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Login.jsx\nimport React, { useState } from 'react';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\n\n// üîê Your Firebase config (replace these with your real config values)\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBTkwcfkXg9FnzaJGKS5iuHiNvkHKLHywA\",\n  authDomain: \"chatbot-authentication-ef411.firebaseapp.com\",\n  projectId: \"chatbot-authentication-ef411\",\n  storageBucket: \"chatbot-authentication-ef411.firebasestorage.app\",\n  messagingSenderId: \"964739824417\",\n  appId: \"1:964739824417:web:45519389e74972b9a1dc60\",\n  measurementId: \"G-VWF0XY3JCR\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\n//const app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst Login = () => {\n  _s();\n  const [isSigningIn, setIsSigningIn] = useState(false);\n  const handleGoogleLogin = async () => {\n    if (isSigningIn) return;\n    setIsSigningIn(true);\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n      console.log('‚úÖ Logged in as:', user.displayName);\n      alert(`Welcome, ${user.displayName}!`);\n      // Optionally redirect: navigate('/interview');\n    } catch (error) {\n      console.error('‚ùå Google sign-in failed:', error.message);\n      alert('Login failed: ' + error.message);\n    } finally {\n      setIsSigningIn(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center min-h-screen bg-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoogleLogin,\n      disabled: isSigningIn,\n      className: `px-6 py-3 rounded text-white ${isSigningIn ? 'bg-gray-500 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`,\n      children: isSigningIn ? 'üîÑ Signing in...' : 'üîê Sign in with Google'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"2Tvj1KeCOmHDWrzRf+0e5zeuuVk=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","getAuth","GoogleAuthProvider","signInWithPopup","initializeApp","getAnalytics","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","Login","_s","isSigningIn","setIsSigningIn","handleGoogleLogin","provider","result","user","console","log","displayName","alert","error","message","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Ai chatbot-interview/ai-interview-chatbot/frontend/src/pages/Login.jsx"],"sourcesContent":["// src/pages/Login.jsx\r\nimport React, { useState } from 'react';\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\n\r\n// üîê Your Firebase config (replace these with your real config values)\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTkwcfkXg9FnzaJGKS5iuHiNvkHKLHywA\",\r\n  authDomain: \"chatbot-authentication-ef411.firebaseapp.com\",\r\n  projectId: \"chatbot-authentication-ef411\",\r\n  storageBucket: \"chatbot-authentication-ef411.firebasestorage.app\",\r\n  messagingSenderId: \"964739824417\",\r\n  appId: \"1:964739824417:web:45519389e74972b9a1dc60\",\r\n  measurementId: \"G-VWF0XY3JCR\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n//const app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\n\r\nconst Login = () => {\r\n  const [isSigningIn, setIsSigningIn] = useState(false);\r\n\r\n  const handleGoogleLogin = async () => {\r\n    if (isSigningIn) return;\r\n    setIsSigningIn(true);\r\n\r\n    const provider = new GoogleAuthProvider();\r\n\r\n    try {\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n      console.log('‚úÖ Logged in as:', user.displayName);\r\n      alert(`Welcome, ${user.displayName}!`);\r\n      // Optionally redirect: navigate('/interview');\r\n    } catch (error) {\r\n      console.error('‚ùå Google sign-in failed:', error.message);\r\n      alert('Login failed: ' + error.message);\r\n    } finally {\r\n      setIsSigningIn(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n      <button\r\n        onClick={handleGoogleLogin}\r\n        disabled={isSigningIn}\r\n        className={`px-6 py-3 rounded text-white ${\r\n          isSigningIn ? 'bg-gray-500 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'\r\n        }`}\r\n      >\r\n        {isSigningIn ? 'üîÑ Signing in...' : 'üîê Sign in with Google'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;;AAE5E;AACA;AACA,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,QAAQ,oBAAoB;AACjD;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,8CAA8C;EAC1DC,SAAS,EAAE,8BAA8B;EACzCC,aAAa,EAAE,kDAAkD;EACjEC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGZ,aAAa,CAACI,cAAc,CAAC;AACzC,MAAMS,SAAS,GAAGZ,YAAY,CAACW,GAAG,CAAC;;AAEnC;AACA,MAAME,IAAI,GAAGjB,OAAO,CAACe,GAAG,CAAC;AAEzB,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMuB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIF,WAAW,EAAE;IACjBC,cAAc,CAAC,IAAI,CAAC;IAEpB,MAAME,QAAQ,GAAG,IAAItB,kBAAkB,CAAC,CAAC;IAEzC,IAAI;MACF,MAAMuB,MAAM,GAAG,MAAMtB,eAAe,CAACe,IAAI,EAAEM,QAAQ,CAAC;MACpD,MAAME,IAAI,GAAGD,MAAM,CAACC,IAAI;MACxBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAACG,WAAW,CAAC;MAChDC,KAAK,CAAC,YAAYJ,IAAI,CAACG,WAAW,GAAG,CAAC;MACtC;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACC,OAAO,CAAC;MACxDF,KAAK,CAAC,gBAAgB,GAAGC,KAAK,CAACC,OAAO,CAAC;IACzC,CAAC,SAAS;MACRV,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,oBACEf,OAAA;IAAK0B,SAAS,EAAC,2DAA2D;IAAAC,QAAA,eACxE3B,OAAA;MACE4B,OAAO,EAAEZ,iBAAkB;MAC3Ba,QAAQ,EAAEf,WAAY;MACtBY,SAAS,EAAE,gCACTZ,WAAW,GAAG,gCAAgC,GAAG,+BAA+B,EAC/E;MAAAa,QAAA,EAEFb,WAAW,GAAG,kBAAkB,GAAG;IAAwB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACpB,EAAA,CApCID,KAAK;AAAAsB,EAAA,GAALtB,KAAK;AAsCX,eAAeA,KAAK;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}